import { DatabaseManager, Player, Track } from "../../index";
export declare class Queue {
    database: DatabaseManager;
    guildId: string;
    player: Player;
    constructor(player: Player);
    tracks: Track[];
    add(track: Track | Track[]): Promise<boolean>;
    get(position: number): Track;
    has(track: Track): boolean;
    remove(position: number): Promise<boolean>;
    shift(): Promise<Track>;
    unshift(track: Track): Promise<boolean>;
    pop(): Promise<Track>;
    clear(): Promise<boolean>;
    shuffle(): Promise<boolean>;
    removeDuplicates(): Promise<boolean>;
    removeBlacklistedTracks(): Promise<boolean>;
    sortByTitle(): Promise<boolean>;
    sortByAuthor(): Promise<boolean>;
    sortByDuration(): Promise<boolean>;
    get size(): number;
    get duration(): number;
    get isEmpty(): boolean;
    get first(): Track;
    get last(): Track;
    get all(): Track[];
    find(query: string): Track | undefined;
    move(from: number, to: number): Promise<boolean>;
    moveRange(fromIndex: number, toIndex: number, count: number): Promise<boolean>;
    removeRange(startIndex: number, endIndex: number): Promise<boolean>;
    duplicate(index: number, count?: number): Promise<boolean>;
    jump(index: number): Promise<boolean>;
    slice(start: number, end?: number): Track[];
    filter(predicate: (track: Track) => boolean): Track[];
    reverse(): Promise<boolean>;
    get position(): number;
    get previous(): Track[];
}
